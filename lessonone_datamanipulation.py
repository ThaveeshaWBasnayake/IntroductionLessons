# -*- coding: utf-8 -*-
"""LessonOne:DataManipulation.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1U7qzUrhphAt0X94Bt8OB7qbTaHj69C9n

#Slide 8
"""

#Exercise 1
import pandas as pd
homelessness = pd.read_csv("homelessness.csv")
# Print the head of the homelessness data
print(homelessness.head())

# Print information about homelessness
print(homelessness.info())

#Exercise 2
# Import pandas using the alias pd
import pandas as pd

# Print the values of homelessness
print(homelessness.values)

# Print the column index of homelessness
print(homelessness.columns)

#Exercise 3
# Select only the individuals and state columns, in that order
ind_state = homelessness[["individuals", "state"]]

# Print the head of the result
print(ind_state.head())

#Exercise 4
# Add total col as sum of individuals and family_members
homelessness["total"] = homelessness["individuals"] +homelessness["family_members"]
# See the result
print(homelessness)

"""#Slide 15"""

import pandas as pd
sales = pd.read_csv("walmart.csv")

#Exercise 1
# Print the mean of weekly_sales
print(sales["weekly_sales"].mean())

# Print the median of weekly_sales
print(sales["weekly_sales"].median())

# Print the max of weekly_sales
print(sales["weekly_sales"].max())

#Exercise 2
# Drop duplicate store/department combinations
store_depts = sales.drop_duplicates(subset = ["store", "department"])
print(store_depts.head())

#Exercise 3
# Calc total weekly sales
sales_all = sales["weekly_sales"].sum()

# Subset for type A stores, calc total weekly sales
sales_A = sales[sales["type"] == "A"]["weekly_sales"].sum()

# Subset for type B stores, calc total weekly sales
sales_B = sales[sales["type"] == "B"]["weekly_sales"].sum()


# Subset for type C stores, calc total weekly sales
sales_C = sales[sales["type"] == "C"]["weekly_sales"].sum()

#Exercise 4
# Pivot for mean weekly_sales by store type and holiday
import numpy as np
mean_sales_by_type_holiday = sales.pivot_table(values="weekly_sales", index="type", columns ="is_holiday")

# Print mean_sales_by_type_holiday
print(mean_sales_by_type_holiday)

"""#Slide 20"""

import pandas as pd
temperatures = pd.read_csv("temperatures.csv")

#Exercise 1
# Set the index of temperatures to city
temperatures_ind = temperatures.set_index("city")

# Look at temperatures_ind
print(temperatures_ind)

# Reset the temperatures_ind index, dropping its contents
print(temperatures_ind.reset_index(drop=True))

#Exercise 2
# Sort temperatures_ind by country then descending city
print(temperatures_ind.sort_index(level = ["country", "city"], ascending = [True, False]))

#Exercise 3
# Subset rows from Pakistan to Russia
print(temperatures.loc["Pakistan":"Russia"])

# Subset rows from Pakistan to Russia
print(temperatures.iloc["Pakistan":"Russia"])

#Exercise 4
# Add a year column to temperatures
temperatures["year"] = temperatures["date"].dt.year

# Pivot avg_temp_c by country and city vs year
temp_by_country_city_vs_year = temperatures.pivot_table("avg_temp_c", index = ["country", "city"], columns ="year")

# See the result
print(temp_by_country_city_vs_year)

# Subset for Egypt to India
temp_by_country_city_vs_year.loc["Egypt":"India"]

"""#Slide 27"""

import pandas as pd
avocados = pd.read_csv("avocado.csv")

#Exercise 1
# Import matplotlib.pyplot with alias plt
import matplotlib.pyplot as plt

# Get the total number of avocados sold on each date
nb_sold_by_date = avocados.groupby("date")["nb_sold"].sum()

# Create a line plot of the number of avocados sold by date
nb_sold_by_date.plot(kind="line")

# Show the plot
plt.show()

# Scatter plot of avg_price vs. nb_sold with title
avocados.plot(x="nb_sold", y="avg_price", kind ="scatter", title="Number of avocados sold vs. average price")

# Show the plot
plt.show()

#Exercise 2
# Check each column for missing values
print(avocados.isna().any())

# Bar plot of missing values by variable
avocados.isna().sum().plot(kind="bar")

# Show plot
plt.show()

# Fill in missing values with 0
avocados_filled = avocados.fillna(0)

# Create histograms of the filled columns
avocados_filled["small_sold", "large_sold", "xl_sold"].hist()

# Show the plot
plt.show()

#Exercise 3
airline_bumping = pd.read_csv("airline_bumping.csv")
print(airline_bumping.head())

#Exercise 4
# Create airline_totals_sorted
airline_totals_sorted = airline_bumping.sort_values("bumps_per_10k", ascending=False)

# Print airline_totals_sorted
print(airline_totals_sorted)

# Save as airline_totals_sorted.csv
airline_totals_sorted.to_csv("airline_totals_sorted.csv")